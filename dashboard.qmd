---
title: "Plateforme de suivi du développement professionnel"
format:
  dashboard:
    theme: morph
    nav-buttons:
      - icon: github
      - href: https://github.com/bresnico/macro-dashboard
server: shiny
---


```{r}
#| context: setup

suppressPackageStartupMessages({
library(shiny)
library(bslib)
library(bsicons)  # UI
library(dplyr)
library(readr)    # Data manipulation
library(plotly)
library(lubridate)
library(ggplot2)  # Visualization
library(DT)       # Tables
})

get_survey_data <- function() {
  tryCatch({
    files <- list.files(
      "data/processed",
      pattern = "^survey_data_.*\\.csv$",
      full.names = TRUE
    )
    if(length(files) == 0) {
      stop("No data files found")
    }
    
    latest_index <- which.max(file.info(files)$mtime)
    latest_file <- files[latest_index]
    latest_date <- format(file.info(files)$mtime[latest_index],
                         format = "%H:%M",
                         tz = "Europe/Paris")
    
    list(
      data = read_csv(latest_file, 
                     locale = locale(encoding = "UTF-8"),
                     show_col_types = FALSE),
      update_time = latest_date
    )
  }, error = function(e) {
    warning(paste("Error loading data:", e$message))
    return(list(data = NULL, update_time = NULL))
  })
}

# Usage
survey_data <- get_survey_data()
data <- survey_data$data
update_time <- survey_data$update_time

```

# Bienvenue

## Row {height=30%}

```{r}
#| content: "valuebox"
#| title: "Nombre d'observations complètes saisies"

list(
icon = "pencil-fill", 
# color = "white",
value = data |> 
  distinct(person_id, timestamp) |> 
  nrow()
)

```

```{r}
#| content: "valuebox"
#| title: "Nombre de groupes impliqués"

list(
icon = "house", 
# color = "white",
value = data |> 
  distinct(group_id) |> 
  nrow()
)

```

```{r}
#| content: "valuebox"
#| title: "Données mise à jour à"


list(
  icon = "calendar-check",
  #color = "white",
  value = update_time
)

```

## Row {height=70%}

```{r}
#| echo: false
#| output: asis

scales_list <- data |> 
  select(scale_label) |> 
  distinct() |> 
  pull() |> 
  sort()

# Créer des cartes en colonnes
cat("::: {.grid}\n\n")

for(scale in scales_list) {
  cat(sprintf("::: {.g-col-4}\n::: {.card}\n%s\n:::\n:::\n\n", scale))
}

cat(":::\n")
```

# Espace profs

## Row {height=30%}

```{r}
#| title: "identification"

textInput("teacher_id", 
          "Votre identifiant personnel",
          placeholder = "Par exemple: 01NS14-artichaut")

uiOutput("teacher_status")

```


```{r}
value_box(
  title = "Nombre de saisies concernées",
  value = textOutput("Observations"),
  showcase = bs_icon("pencil-fill")

)
```



```{r}
value_box(
  title = "Groupe de référence",
  value = textOutput("GroupeRef"),
  showcase = bs_icon("house")
)
```


```{r}
#| content: "valuebox"
#| title: "Données mise à jour à"

list(
  color = "morph",
  value = update_time,
  icon = "calendar-check"
)

```

## Row {height=70%}


### {.toolbar} {width=30%}


```{r}
#| title: "Commandes"

uiOutput("scale_choices")

# UI conditionnelle pour les scores disponibles
uiOutput("score_choices")

```

### {.tabset}

```{r}
#| title: "Plot"

plotlyOutput("scale_plot")

```


```{r}
#| title: "Table"

DTOutput("scale_table")

```


# Espace direction

## Row {height=30%}

```{r}
#| title: "identification"
textInput("group_id", 
          "Code de l'établissement",
          placeholder = "Par exemple: un")

uiOutput("group_status")
```

```{r}
value_box(
  title = "Nombre d'observations",
  value = textOutput("GroupObservations"),
  showcase = bs_icon("pencil-fill")

)
```

```{r}
value_box(
  title = "Nombre d'utilisateurs",
  value = textOutput("GroupUsers"),
  showcase = bs_icon("people-fill")

)
```

```{r}
#| content: "valuebox"
#| title: "Données mise à jour à"

list(
  color = "morph",
  value = update_time,
  icon = "calendar-check"
)

```

## Row {height=70%}

### {.toolbar} {width=30%}

```{r}
#| title: "Commandes de groupe"
uiOutput("group_scale_choices")
uiOutput("group_score_choices")
```

### {.tabset}

#### Plot

```{r}

plotlyOutput("group_scale_plot")

```

#### Table

```{r}

DTOutput("group_scale_table")

```

# Espace recherche

## {.sidebar}

```{r}
#| title: "Identification chercheur"

textInput("researcher_id", 
         "Code chercheur",
         placeholder = "Entrez votre code chercheur")

# Affichage du statut
uiOutput("researcher_status")

```

## {.tabset} 

### Plots

```{r}
plotlyOutput("research_plot", height = "600px")
```

### Résumé

```{r}
DTOutput("research_summary")
```


### Table

```{r}
#| content: card-toolbar

uiOutput("download_button")
```


```{r}
DTOutput("research_table")
```

<!-- Serveur - partie enseignant -->

```{r}
#| context: server

# Espace enseignant----

# 1. Validation et réactivité ----
output$teacher_status <- renderUI({
  req(input$teacher_id)
  valid_teacher_id <- any(data$person_id_secure == input$teacher_id, na.rm = TRUE)
  
  if(valid_teacher_id) {
    tagList(
      div(style = "color: green;", icon("check-circle"), "Identifiant valide"),
    )
  } else {
    div(style = "color: red;", icon("exclamation-circle"), 
        "Identifiant non reconnu")
  }
})

# 2. Données et calculs ----

## Données réactives pour l'id de l'enseignant (même person_id dans le bon group_id)
teacher_data <- reactive({
  req(input$teacher_id)
  validate(need(nchar(input$teacher_id) > 0, ""))
  validate(need(any(data$person_id_secure == input$teacher_id, na.rm = TRUE), ""))

  secure_match <- data |>
    filter(person_id_secure == input$teacher_id) |> 
    distinct(person_id, group_id) |> 
    head(1)  # On prend le premier match si plusieurs
  
  data |> 
    filter(
      person_id == secure_match$person_id,
      group_id == secure_match$group_id,
      score_value != -99
    )
})

# 3. UI Controls ----

# UI dynamique pour le choix d'échelle 
output$scale_choices <- renderUI({
  req(teacher_data())
  
  selectInput(
    "selected_scale", 
    "Échelle à visualiser :",
    choices = unique(teacher_data()$scale_label),
    selected = NULL
  )
})

# UI dynamique pour les choix de scores
output$score_choices <- renderUI({
  req(teacher_data(), input$selected_scale)
  
  scores <- teacher_data() |> 
    filter(scale_label == input$selected_scale) |> 
    pull(score_type_label) |> 
    unique()
  
  checkboxGroupInput(
    "selected_scores",
    "Scores à afficher :",
    choices = scores,
    selected = scores[1]
  )
})

# 4. Visualisations ----

# Plot
output$scale_plot <- renderPlotly({
  if (is.null(input$teacher_id) || 
     nchar(input$teacher_id) == 0 || 
     !any(data$person_id_secure == input$teacher_id, na.rm = TRUE)) return(NULL)
  
  req(teacher_data(), input$selected_scale, input$selected_scores)
  
  plot_data <- teacher_data() |> 
    filter(
      scale_label == input$selected_scale,
      score_type_label %in% input$selected_scores
    )
  
  reference_segments <- plot_data |> 
    group_by(month, score_type_label) |> 
    summarise(
      reference_value = first(reference_value),
      start = floor_date(min(timestamp), "month"),
      end = ceiling_date(min(timestamp), "month") - days(1),
      .groups = "drop"
    )
  
  validate(need(nrow(plot_data) > 0, "Aucune donnée à afficher"))
  
  p <- ggplot() +
    geom_segment(
      data = reference_segments,
      aes(x = start, xend = end,
          y = reference_value, yend = reference_value,
          color = score_type_label),
      linewidth = 1
    ) +
    geom_line(
      data = plot_data,
      aes(x = timestamp, y = score_value, color = score_type_label),
      linewidth = 1
    ) +
    geom_point(
      data = plot_data,
      aes(x = timestamp, y = score_value, color = score_type_label),
      size = 3
    ) +
    labs(
      x = "Date",
      y = "Valeur",
      color = "Score"
    ) +
    scale_x_date(date_labels = "%B", date_breaks = "1 month") +
    theme_minimal()
  
  ggplotly(p, config = list(displayModeBar = FALSE)) |>
  layout(
    paper_bgcolor = "rgba(0,0,0,0)", 
    plot_bgcolor = "rgba(0,0,0,0)",
    font = list(color = "rgb(33, 37, 41)"),
    xaxis = list(
      gridcolor = "rgba(128,128,128,0.2)",
      zerolinecolor = "rgba(128,128,128,0.2)"
    ),
    yaxis = list(
      gridcolor = "rgba(128,128,128,0.2)", 
      zerolinecolor = "rgba(128,128,128,0.2)"
    )
  )
})

## Table des données
output$scale_table <- renderDT({
  if (is.null(input$teacher_id) || 
     nchar(input$teacher_id) == 0 || 
     !any(data$person_id_secure == input$teacher_id, na.rm = TRUE)) return(NULL)
  
  req(teacher_data(), input$selected_scale, input$selected_scores)
  
  table_data <- teacher_data() |>
    filter(
      scale_label == input$selected_scale,
      score_type_label %in% input$selected_scores
      ) |> 
    select(
      timestamp,
      score_type_label,
      score_value,
      reference_value, 
      reference_sd,
      quartile,
      n_group
      )
  validate(need(nrow(table_data) > 0, "Aucune donnée à afficher"))
  
  table_data |> 
    rename(
      "Date" = timestamp,
      "Type de score" = score_type_label,
      "Score personnel" = score_value,
      "Moyenne du groupe" = reference_value,
      "Écart-type" = reference_sd,
      "Quartile" = quartile,
      "N" = n_group
      ) |>
    arrange(desc(`Date`)) |>
    datatable(
      options = list(
        pageLength = 10,
        dom = 't',
        ordering = FALSE
        ),
      rownames = FALSE
      ) |>
    formatRound(
      columns = c("Score personnel", "Moyenne du groupe", "Écart-type"),
      digits = 2
      ) |>
    formatDate(
      columns = "Date",
      method = "toLocaleDateString"
      )
})

# 5. Métriques ----

output$Observations <- renderText({
  teacher_data() |> 
    distinct(timestamp) |>
    nrow()
})

output$GroupeRef <- renderText({
  teacher_data() |> 
    pull(group_id) |>
    unique() |>
    first()
})
```

<!-- Serveur - partie direction -->

```{r}
#| context: server

# espace direction----

# 1. Validation et réactivité ----

output$group_status <- renderUI({
  req(input$group_id)
  valid_group_id <- any(data$group_id == input$group_id, na.rm = TRUE)
  
  if(valid_group_id) {
    tagList(
      div(style = "color: green;", icon("check-circle"), "Code valide"),
      # Mettre ici les éléments d'UI supplémentaires pour un groupe valide
    )
  } else {
    div(style = "color: red;", icon("exclamation-circle"), 
        "Code établissement non reconnu")
  }
})

# 2. Données et calculs ----

## Données filtrées par groupe

group_data <- reactive({
  req(input$group_id)
  validate(need(nchar(input$group_id) > 0, ""))
  validate(need(any(data$group_id == input$group_id, na.rm = TRUE), ""))
  
  # Filtrer les données
  data |>
    filter(group_id == input$group_id)
})

## Calcul des références
reference_data <- reactive({
  req(group_data())
  data |>
    group_by(month, scale_label, score_type_label) |>
    summarise(
      reference_value = mean(score_value, na.rm = TRUE),
      reference_sd = sd(score_value, na.rm = TRUE),
      n_total = n(),
      .groups = "drop"
    )
})

## Calculs des moyennes de groupe (utilisé par plot et table)
group_means <- reactive({
  req(group_data(), input$selected_group_scale, input$selected_group_scores)
  group_data() |>
    filter(
      scale_label == input$selected_group_scale,
      score_type_label %in% input$selected_group_scores
    ) |>
    group_by(month, scale_label, score_type_label) |>
    summarise(
      group_mean = mean(score_value, na.rm = TRUE),
      n_group = n(),
      .groups = "drop"
    )
})

# 3. UI Controls ----

## UI pour choix d'échelle
output$group_scale_choices <- renderUI({
  req(group_data())
  
  selectInput(
    "selected_group_scale", 
    "Échelle à visualiser :",
    choices = unique(group_data()$scale_label),
    selected = NULL
  )
})

## UI pour choix de scores et sous-scores
output$group_score_choices <- renderUI({
  req(group_data(), input$selected_group_scale)
  
  scores <- group_data() |>
    filter(scale_label == input$selected_group_scale) |>
    pull(score_type_label) |>
    unique()
  
  checkboxGroupInput(
    "selected_group_scores",
    "Scores à afficher :",
    choices = scores,
    selected = scores[1]
  )
})

# 4. Visualisations ----

## Plot
output$group_scale_plot <- renderPlotly({
  if (is.null(input$group_id) || 
     nchar(input$group_id) == 0 || 
     !any(data$group_id == input$group_id, na.rm = TRUE)) return(NULL)
  
  req(group_means(), reference_data())
  
  plot_data <- group_means() |>
    left_join(reference_data(), 
              by = c("month", "scale_label", "score_type_label"))
  
  validate(need(nrow(plot_data) > 0, "Aucune donnée à afficher"))
  
  reference_segments <- plot_data |>
    group_by(month, score_type_label) |>
    summarise(
      reference_value = first(reference_value),
      timestamp = min(as.Date(paste("01", month), format="%d %B %Y")),
      start = floor_date(timestamp, "month"),
      end = ceiling_date(timestamp, "month") - days(1),
      .groups = "drop"
      )
  
  plot_data <- plot_data |>
    mutate(timestamp = as.Date(paste("01", month), format="%d %B %Y"))
  
  p <- ggplot() +
    geom_segment(
      data = reference_segments,
      aes(x = start, xend = end,
          y = reference_value, yend = reference_value,
          color = score_type_label),
      linetype = "dashed",
      linewidth = 1
    ) +
    geom_line(
      data = plot_data,
      aes(x = timestamp, 
          y = group_mean,
          color = score_type_label),
      linewidth = 1
    ) +
    geom_point(
      data = plot_data,
      aes(x = timestamp, 
          y = group_mean,
          color = score_type_label),
      size = 3
    ) +
    labs(
      x = "Période",
      y = "Score moyen",
      color = "Type de score"
    ) +
    scale_x_date(date_labels = "%B %Y", date_breaks = "1 month") +
    theme_minimal()
    
  ggplotly(p, tooltip = c("x","y","color")) |> 
    layout(
    paper_bgcolor = "rgba(0,0,0,0)", 
    plot_bgcolor = "rgba(0,0,0,0)",
    font = list(color = "rgb(33, 37, 41)"),
    xaxis = list(
      gridcolor = "rgba(128,128,128,0.2)",
      zerolinecolor = "rgba(128,128,128,0.2)"
    ),
    yaxis = list(
      gridcolor = "rgba(128,128,128,0.2)", 
      zerolinecolor = "rgba(128,128,128,0.2)"
    )
  )
})

# Table des données de groupe
output$group_scale_table <- renderDT({
  if (is.null(input$group_id) || 
     nchar(input$group_id) == 0 || 
     !any(data$group_id == input$group_id, na.rm = TRUE)) return(NULL)
  
  req(group_means(), reference_data())
  
  table_data <- group_means() |>
    left_join(reference_data(),
              by = c("month", "scale_label", "score_type_label")) |>
    select(month, score_type_label, group_mean, reference_value, 
           reference_sd, n_group, n_total)
  
  validate(need(nrow(table_data) > 0, "Aucune donnée à afficher"))
  
  table_data |>
    rename(
      "Mois" = month,
      "Type de score" = score_type_label,
      "Moyenne du groupe" = group_mean,
      "Moyenne globale" = reference_value,
      "Écart-type global" = reference_sd,
      "N groupe" = n_group,
      "N total" = n_total
    ) |>
    arrange(desc(`Mois`)) |>
    datatable(
      options = list(
        pageLength = 10,
        dom = 't',
        ordering = FALSE
      ),
      rownames = FALSE
    ) |>
    formatRound(
      columns = c("Moyenne du groupe", "Moyenne globale", "Écart-type global"),
      digits = 2
    )
})

# 5. Métriques ----

## Nombre d'observations
output$GroupObservations <- renderText({
  group_data() |> 
    distinct(timestamp, person_id) |>  # On ne compte qu'une fois par mois et par personne
    nrow()
})

## Nombre d'utilisateurs uniques
output$GroupUsers <- renderText({
  group_data() |>
    distinct(person_id) |>
    nrow()
})

```

<!-- Serveur - partie chercheurs -->

```{r}
#| context: server

# Espace recherche----

# 1. Validation et réactivité ----

valid_researcher <- reactive({
  req(input$researcher_id)
  validate(need(nchar(input$researcher_id) > 0, ""))
  any(data$researcher_id == input$researcher_id, na.rm = TRUE)
})

output$researcher_status <- renderUI({
  req(input$researcher_id)  # Assure que l'ID du chercheur est défini
  
if(valid_researcher()) {
    scales_default <- unique(data$scale_label)[1]
    groups_default <- unique(data$group_id)[1]
    status_default <- unique(data$status)[1]
    experience_default <- unique(data$experience)[1]
    gender_default <- unique(data$gender)[1]
    age_default <- unique(data$age)[1]
    
    tagList(
      div(style = "color: green;", icon("check-circle"), "Code valide"),
      
      selectInput("research_scales", "Échelles",
                  choices = unique(data$scale_label),
                  multiple = TRUE,
                  selected = scales_default),
      
      selectInput("research_groups", "Groupes",
                  choices = unique(data$group_id),
                  multiple = TRUE,
                  selected = groups_default),
      
      selectInput("research_status", "Status",
                  choices = unique(data$status),
                  multiple = TRUE,
                  selected = status_default),
      
      selectInput("research_gender", "Genre",
                  choices = unique(data$gender),
                  multiple = TRUE,
                  selected = gender_default),
      
      selectInput("research_age", "Age",
                  choices = unique(data$age),
                  multiple = TRUE,
                  selected = age_default)
    )
  } else {
    div(style = "color: red;", icon("exclamation-circle"), "Code non reconnu")
  }
})

# Observers pour maintenir au moins une sélection
observe({
  inputs <- c("research_scales", "research_groups", "research_status", 
              "research_gender", "research_age")
  
  for(input_name in inputs) {
    if(length(input[[input_name]]) == 0) {
      updateSelectInput(session, input_name, 
                       selected = unique(data[[gsub("research_", "", input_name)]])[1])
    }
  }
})

# 2. Données et calculs ----

## Données filtrées par groupe

# Données filtrées
filtered_research_data <- reactive({
  if (!valid_researcher()) return(NULL)
  validate(need(valid_researcher(), "Code chercheur invalide"))
  
  req(input$research_scales,
      input$research_groups, 
      input$research_status,
      input$research_gender,
      input$research_age
      )
  
  data |> 
    filter(
      researcher_id == input$researcher_id,
      scale_label %in% input$research_scales,
      group_id %in% input$research_groups,
      status %in% input$research_status,
      gender %in% input$research_gender,
      age %in% input$research_age
      )
})

# 3. Visualisations ----

## Plots

output$research_plot <- renderPlotly({
  if (is.null(filtered_research_data()) || nrow(filtered_research_data()) == 0) return(NULL)
  validate(need(nrow(filtered_research_data()) > 0, "Aucune donnée à afficher"))

  p <- filtered_research_data() |>
    ggplot(aes(x = month, y = score_value, color = score_type_label)) +
    geom_boxplot() +
    facet_wrap(~scale_label, scales = "free_y") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    labs(x = "Mois", y = "Score", color = "Type de score") 
  
  ggplotly(p) |> 
    layout(
      paper_bgcolor = "rgba(0,0,0,0)", 
      plot_bgcolor = "rgba(0,0,0,0)",
      font = list(color = "rgb(33, 37, 41)"),
      xaxis = list(
        gridcolor = "rgba(128,128,128,0.2)",
        zerolinecolor = "rgba(128,128,128,0.2)"
        ),
      yaxis = list(
        gridcolor = "rgba(128,128,128,0.2)", 
        zerolinecolor = "rgba(128,128,128,0.2)"
        )
      )
})

## Data Summary

output$research_summary <- renderDT({
  if (is.null(filtered_research_data()) || nrow(filtered_research_data()) == 0) return(NULL)
  validate(need(nrow(filtered_research_data()) > 0, "Aucune donnée à afficher"))

  filtered_research_data() |>
    group_by(scale_label, score_type_label) |>
    summarise(
      N = n(),
      Moyenne = mean(score_value, na.rm = TRUE),
      "Écart-type" = sd(score_value, na.rm = TRUE),
      Min = min(score_value, na.rm = TRUE),
      Max = max(score_value, na.rm = TRUE),
      .groups = 'drop'
      ) |>
    datatable(
      options = list(dom = 't'),
      rownames = FALSE
      ) |>
    formatRound(columns = c("Moyenne", "Écart-type", "Min", "Max"), digits = 2)
})

## Table
output$research_table <- renderDT({
  if (is.null(filtered_research_data()) || nrow(filtered_research_data()) == 0) return(NULL)
  validate(need(nrow(filtered_research_data()) > 0, "Aucune donnée à afficher"))
  
  filtered_research_data() |>
    datatable(
      options = list(pageLength = 25, scrollX = TRUE),
      rownames = FALSE
      )
})

# 4. UI Controls ----

## Fonction de téléchargement
output$download_button <- renderUI({
  req(valid_researcher(), filtered_research_data())
  
  if(nrow(filtered_research_data()) > 0) {
    downloadButton("downloadData", 
                  sprintf("Télécharger les données (%d observations)", 
                         nrow(filtered_research_data())))
  } else {
    div(style = "color: #6c757d;",
        icon("exclamation-circle"), 
        "Aucune donnée disponible avec ces filtres")
  }
})

# Handler pour le téléchargement
output$downloadData <- downloadHandler(
  filename = function() {
    format(Sys.time(), "research_data_%Y%m%d_%H%M%S.csv")
  },
  content = function(file) {
    write_csv(filtered_research_data(), file)
  }
)

```

